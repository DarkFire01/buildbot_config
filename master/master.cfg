# -*- python -*-
# ex: set syntax=python:
from buildbot.buildslave import BuildSlave
from buildbot.changes.pb import PBChangeSource
from buildbot.config import BuilderConfig
from buildbot.process import factory
from buildbot.scheduler import Triggerable, Periodic
from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.filter import ChangeFilter
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.status import html, words, mail
from buildbot.status.web.auth import AuthBase, IAuth
from buildbot.status.web.authz import Authz
from buildbot.steps import source, shell
from buildbot.steps.shell import ShellCommand, WithProperties
from buildbot.steps.source.git import Git
from buildbot.steps.trigger import Trigger
from buildbot.sourcestamp import SourceStamp
from buildbot.status.mail import MailNotifier
from zope.interface import implements
import ConfigParser

# LDAPAuth class for authenticating against LDAP
# Taken from http://trac.buildbot.net/attachment/ticket/138/0012-Implement-an-LDAP-based-authentication-for-the-WebSt.patch
# Configured and stripped down by Colin Finck (2015-01-18)
class LDAPAuth(AuthBase):
	implements(IAuth)

	def __init__(self):
		global credentials
		self.host = credentials.get("ldap", "host")
		self.basedn = credentials.get("ldap", "basedn")
		self.binddn = credentials.get("ldap", "binddn")
		self.passwd = credentials.get("ldap", "passwd")
		self.search = credentials.get("ldap", "search")

	def authenticate(self, login, password):
		import ldap

		try:
			res = self._authenticate(login, password)
			if res:
				self.err = ""
			return res
		except ldap.LDAPError, e:
			self.err = "LDAP error: " + str(e)
			return False
		except:
			self.err = "unknown error"
			return False

	def _authenticate(self, login, password):
		import ldap

		search_conn = ldap.open(self.host)
		search_conn.bind_s(self.binddn, self.passwd, ldap.AUTH_SIMPLE)

		try:
			result = search_conn.search_s(self.basedn, ldap.SCOPE_SUBTREE, self.search % login, ['objectclass'], 1)
		except ldap.SERVER_DOWN:
			self.err = "LDAP server seems down"
			return False

		# Make sure we found a single user in the LDAP DB
		if not result or len(result) != 1:
			self.err = "user not found in the LDAP DB"
			return False

		auth_conn = ldap.open(self.host)
		ldap_dn = result[0][0]

		# Authenticate the user
		try:
			auth_conn.bind_s(ldap_dn, password, ldap.AUTH_SIMPLE)
		except ldap.INVALID_CREDENTIALS:
			self.err = "invalid credentials"
			return False

		auth_conn.unbind()
		return True


# Read the config
credentials = ConfigParser.ConfigParser()
if len(credentials.read("credentials.ini")) == 0:
	raise Exception("credentials.ini not found or empty!")

# Builders
Build_GCCLin_x86 = factory.BuildFactory();
Build_GCCLin_x86.addStep(ShellCommand(name="clean", command=["../../clean"], description=["cleaning"], descriptionDone=["clean"], haltOnFailure=True))
Build_GCCLin_x86.addStep(Git(repourl='https://git.reactos.org/reactos.git', mode='full'))
Build_GCCLin_x86.addStep(ShellCommand(name="preparing source", command=["../../prepare_source", WithProperties("%(id:-)s")], description=["preparing source"], descriptionDone=["prepared source"], haltOnFailure=True))
Build_GCCLin_x86.addStep(shell.Compile(command=["../../configure"], description=["configure"], descriptionDone=["configured"]))
Build_GCCLin_x86.addStep(shell.Compile(command=["../../build_reactos", "bootcd"], warningPattern="^(.*warning[: ].*|.*error[: ].*)", description=["BootCD"], descriptionDone=["BootCD"]))
Build_GCCLin_x86.addStep(shell.Compile(command=["../../build_reactos", "livecd"], warningPattern="^(.*warning[: ].*|.*error[: ].*)", description=["LiveCD"], descriptionDone=["LiveCD"]))
Build_GCCLin_x86.addStep(shell.Compile(command=["../../regtestcd", "-DENABLE_ROSTESTS=1"], warningPattern="^(.*warning[: ].*|.*error[: ].*)", description=["TestCD"], descriptionDone=["TestCD"]))
Build_GCCLin_x86.addStep(shell.SetPropertyFromCommand(command=["../../get_suffix"], property="suffix"))
Build_GCCLin_x86.addStep(Trigger(schedulerNames=['HotelLux Testbot Trigger'], waitForFinish=False, copy_properties=['got_revision', 'id', 'owner', 'reason', 'suffix']))
Build_GCCLin_x86.addStep(ShellCommand(command=["../../uploadiso"], description=["uploading"], descriptionDone=["uploaded"]))

Build_GCCLin_x86_Release = factory.BuildFactory();
Build_GCCLin_x86_Release.addStep(ShellCommand(name="clean", command=["../../clean"], description=["cleaning"], descriptionDone=["clean"], haltOnFailure=True))
Build_GCCLin_x86_Release.addStep(Git(repourl='https://git.reactos.org/reactos.git', mode='full'))
Build_GCCLin_x86_Release.addStep(ShellCommand(name="preparing source", command=["../../prepare_source"], description=["preparing source"], descriptionDone=["prepared source"], haltOnFailure=True))
Build_GCCLin_x86_Release.addStep(shell.Compile(command=["../../configure"], description=["configure"], descriptionDone=["configured"]))
Build_GCCLin_x86_Release.addStep(shell.Compile(command=["../../build_reactos", "bootcd"], warningPattern="^(.*warning[: ].*|.*error[: ].*)", description=["BootCD"], descriptionDone=["BootCD"]))
Build_GCCLin_x86_Release.addStep(shell.Compile(command=["../../build_reactos", "livecd"], warningPattern="^(.*warning[: ].*|.*error[: ].*)", description=["LiveCD"], descriptionDone=["LiveCD"]))
Build_GCCLin_x86_Release.addStep(ShellCommand(command=["../../uploadiso"], description=["uploading"], descriptionDone=["uploaded"]))

Build_GCCWin_x86 = factory.BuildFactory();
Build_GCCWin_x86.addStep(ShellCommand(name="clean", command=["bash", "../../clean"], description=["cleaning"], descriptionDone=["clean"], haltOnFailure=True))
Build_GCCWin_x86.addStep(Git(repourl='https://git.reactos.org/reactos.git', mode='full'))
Build_GCCWin_x86.addStep(ShellCommand(name="preparing source", command=["bash", "../../prepare_source", WithProperties("%(id:-)s")], description=["preparing source"], descriptionDone=["prepared source"], haltOnFailure=True))
Build_GCCWin_x86.addStep(shell.Compile(command=["bash", "../../configure", "-DENABLE_ROSAPPS=1", "-DENABLE_ROSTESTS=1"], description=["configure"], descriptionDone=["configured"]))
Build_GCCWin_x86.addStep(shell.Compile(command=["bash", "../../build_reactos", "bootcd"], warningPattern="^(.*warning[: ].*|.*error[: ].*)", description=["BootCD"], descriptionDone=["BootCD"]))
Build_GCCWin_x86.addStep(shell.Compile(command=["bash", "../../build_reactos", "livecd"], warningPattern="^(.*warning[: ].*|.*error[: ].*)", description=["LiveCD"], descriptionDone=["LiveCD"]))

Build_MSVC_x86 = factory.BuildFactory();
Build_MSVC_x86.addStep(ShellCommand(name="clean", command=["bash", "../../clean"], description=["cleaning"], descriptionDone=["clean"], haltOnFailure=True))
Build_MSVC_x86.addStep(Git(repourl='https://git.reactos.org/reactos.git', mode='full'))
Build_MSVC_x86.addStep(ShellCommand(name="preparing source", command=["bash", "../../prepare_source", WithProperties("%(id:-)s")], description=["preparing source"], descriptionDone=["prepared source"], haltOnFailure=True))
Build_MSVC_x86.addStep(shell.Compile(command=["bash", "../../configure_msvc"], description=["configure"], descriptionDone=["configured"]))
Build_MSVC_x86.addStep(shell.Compile(command=["bash", "../../build_reactos", "bootcd"], warningPattern="^(.*warning[: ].*|.*error[: ].*)", description=["BootCD"], descriptionDone=["BootCD"]))
Build_MSVC_x86.addStep(shell.Compile(command=["bash", "../../build_reactos", "livecd"], warningPattern="^(.*warning[: ].*|.*error[: ].*)", description=["LiveCD"], descriptionDone=["LiveCD"]))
Build_MSVC_x86.addStep(ShellCommand(command=["bash", "../../uploadiso"], description=["uploading"], descriptionDone=["uploaded"]))

Build_MSVC2010_x86 = factory.BuildFactory();
Build_MSVC2010_x86.addStep(ShellCommand(name="clean", command=["bash", "../../clean"], description=["cleaning"], descriptionDone=["clean"], haltOnFailure=True))
Build_MSVC2010_x86.addStep(Git(repourl='https://git.reactos.org/reactos.git', mode='full'))
Build_MSVC2010_x86.addStep(ShellCommand(name="preparing source", command=["bash", "../../prepare_source", WithProperties("%(id:-)s")], description=["preparing source"], descriptionDone=["prepared source"], haltOnFailure=True))
Build_MSVC2010_x86.addStep(shell.Compile(command=["bash", "../../configure_msvc", "-DENABLE_ROSAPPS=1", "-DENABLE_ROSTESTS=1"], description=["configure"], descriptionDone=["configured"]))
Build_MSVC2010_x86.addStep(shell.Compile(command=["bash", "../../build_reactos", "bootcd"], warningPattern="^(.*warning[: ].*|.*error[: ].*)", description=["BootCD"], descriptionDone=["BootCD"]))
Build_MSVC2010_x86.addStep(shell.Compile(command=["bash", "../../build_reactos", "livecd"], warningPattern="^(.*warning[: ].*|.*error[: ].*)", description=["LiveCD"], descriptionDone=["LiveCD"]))

Build_MSVC_x64 = factory.BuildFactory();
Build_MSVC_x64.addStep(ShellCommand(name="clean", command=["bash", "../../clean"], description=["cleaning"], descriptionDone=["clean"], haltOnFailure=True))
Build_MSVC_x64.addStep(Git(repourl='https://git.reactos.org/reactos.git', mode='full'))
Build_MSVC_x64.addStep(ShellCommand(name="preparing source", command=["bash", "../../prepare_source", WithProperties("%(id:-)s")], description=["preparing source"], descriptionDone=["prepared source"], haltOnFailure=True))
Build_MSVC_x64.addStep(shell.Compile(command=["bash", "../../configure_msvc"], description=["configure"], descriptionDone=["configured"]))
Build_MSVC_x64.addStep(shell.Compile(command=["bash", "../../build_reactos", "bootcd"], warningPattern="^(.*warning[: ].*|.*error[: ].*)", description=["BootCD"], descriptionDone=["BootCD"]))
Build_MSVC_x64.addStep(shell.Compile(command=["bash", "../../build_reactos", "livecd"], warningPattern="^(.*warning[: ].*|.*error[: ].*)", description=["LiveCD"], descriptionDone=["LiveCD"]))
Build_MSVC_x64.addStep(ShellCommand(command=["bash", "../../uploadiso"], description=["uploading"], descriptionDone=["uploaded"]))

Test_KVM = factory.BuildFactory();
Test_KVM.addStep(shell.Compile(name="test", command=["sudo", "../../regtest", WithProperties('%(suffix)s')], warningPattern=".*[:] Test .*", description=["testing"], descriptionDone=["test"]))
Test_KVM.addStep(ShellCommand(command=["../../submit_result", WithProperties('%(buildnumber)s'), WithProperties('%(reason:-)s'), WithProperties('%(id:-)s')], description=["submitting results"], descriptionDone=["submit results"]))

Test_KVM_AHK = factory.BuildFactory();
Test_KVM_AHK.addStep(ShellCommand(name="clean", command=["../../clean"], description=["cleaning"], descriptionDone=["clean"], haltOnFailure=True))
Test_KVM_AHK.addStep(Git(repourl='https://git.reactos.org/reactos.git', mode='full'))
Test_KVM_AHK.addStep(ShellCommand(name="prepare ahk", command=["../../prepare_ahk"], description=["preparing ahk"], descriptionDone=["prepared ahk"], haltOnFailure=True))
Test_KVM_AHK.addStep(ShellCommand(name="preparing source", command=["../../prepare_source", WithProperties("%(id:-)s")], description=["preparing source"], descriptionDone=["prepared source"], haltOnFailure=True))
Test_KVM_AHK.addStep(ShellCommand(name="compile ahk", command=["modules/AHK_Tests/compile.sh"], description=["compiling ahk"], descriptionDone=["compiled ahk"], haltOnFailure=True))
Test_KVM_AHK.addStep(shell.Compile(command=["../../regtestcd"], warningPattern="^(.*warning[: ].*|.*error[: ].*)", description=["TestCD"], descriptionDone=["TestCD"]))
Test_KVM_AHK.addStep(shell.Compile(name="test", command=["sudo", "../../regtest"], warningPattern=".*[:] Test .*", description=["testing"], descriptionDone=["test"], haltOnFailure=False))
Test_KVM_AHK.addStep(ShellCommand(command=["../../submit_result", WithProperties('%(buildnumber)s'), WithProperties('%(reason:-)s'), WithProperties('%(id:-)s')], description=["submitting results"], descriptionDone=["submit results"]))

Test_VBox = factory.BuildFactory();
Test_VBox.addStep(ShellCommand(command=["../../vbox_clean"], description=["cleaning VirtualBox"], descriptionDone=["cleaned VirtualBox"], haltOnFailure=True))
Test_VBox.addStep(shell.Compile(name="test", command=["../../regtest", WithProperties('%(suffix)s')], warningPattern=".*[:] Test .*", description=["testing"], descriptionDone=["test"]))
Test_VBox.addStep(ShellCommand(command=["../../submit_result", WithProperties('%(buildnumber)s'), WithProperties('%(reason:-)s'), WithProperties('%(id:-)s')], description=["submitting results"], descriptionDone=["submit results"]))

Test_VMW = factory.BuildFactory();
Test_VMW.addStep(ShellCommand(command=["../../vmware_clean"], description=["cleaning VMware"], descriptionDone=["cleaned VMware"], haltOnFailure=True))
Test_VMW.addStep(shell.Compile(name="test", command=["sudo", "../../regtest", WithProperties('%(suffix)s')], warningPattern=".*[:] Test .*", description=["testing"], descriptionDone=["test"]))
Test_VMW.addStep(ShellCommand(command=["../../submit_result", WithProperties('%(buildnumber)s'), WithProperties('%(reason:-)s'), WithProperties('%(id:-)s')], description=["submitting results"], descriptionDone=["submit results"]))

Test_VMW_Hybrid = factory.BuildFactory();
Test_VMW_Hybrid.addStep(ShellCommand(command=["../../vmware_clean"], description=["cleaning VMware"], descriptionDone=["cleaned VMware"], haltOnFailure=True))
Test_VMW_Hybrid.addStep(shell.Compile(name="test", command=["sudo", "../../regtest", WithProperties('%(suffix)s')], warningPattern=".*[:] Test .*", description=["testing"], descriptionDone=["test"]))
Test_VMW_Hybrid.addStep(ShellCommand(command=["../../submit_result", WithProperties('%(buildnumber)s'), WithProperties('%(reason:-)s'), WithProperties('%(id:-)s')], description=["submitting results"], descriptionDone=["submit results"]))

Test_WHS = factory.BuildFactory();
Test_WHS.addStep(ShellCommand(name="clean", command=["bash", "../../clean"], description=["cleaning"], descriptionDone=["clean"], haltOnFailure=True))
Test_WHS.addStep(Git(repourl='https://git.reactos.org/reactos.git', mode='full'))
Test_WHS.addStep(shell.Compile(command=["bash", "../../configure", "-DENABLE_ROSTESTS=1"], description=["configure"], descriptionDone=["configured"]))
Test_WHS.addStep(shell.Compile(command=["bash", "../../build_reactos", "rostests"], warningPattern="^(.*warning[: ].*|.*error[: ].*)", description=["rostests"], descriptionDone=["rostests"]))
Test_WHS.addStep(shell.Compile(name="test", command=["bash", "../../run_tests", WithProperties('%(buildnumber)s')], warningPattern=".*[:] Test .*", description=["testing"], descriptionDone=["test"]))

# Configuration
c = BuildmasterConfig = {}

c['buildbotURL'] = "https://build.reactos.org/"
c['change_source'] = PBChangeSource(port=9990)
c['projectName'] = "ReactOS"
c['projectURL'] = "https://reactos.org/"
c['slavePortnum'] = 9989

# Data lifetime
c['changeHorizon'] = 500
c['buildHorizon'] = 500
c['eventHorizon'] = 50
c['logHorizon'] = 500
c['buildCacheSize'] = 500
c['changeCacheSize'] = 500

SourceStamp.canBeMergedWith = lambda self, x: False

c['builders'] = [
	BuilderConfig(name="Build GCCLin_x86", slavename="HotelLux", builddir="Build_GCCLin_x86", factory=Build_GCCLin_x86),
	BuilderConfig(name="Build GCCLin_x86 Release", slavename="HotelLux", builddir="Build_GCCLin_x86_Release", factory=Build_GCCLin_x86_Release),
	BuilderConfig(name="Test KVM", slavename="HotelLux", builddir="Test_KVM", factory=Test_KVM),
	BuilderConfig(name="Test KVM AHK", slavename="AHK-Bot", builddir="Test_KVM_AHK", factory=Test_KVM_AHK),
	BuilderConfig(name="Test VMW", slavename="Fezile", builddir="Test_VMW", factory=Test_VMW),
	BuilderConfig(name="Test VMW Hybrid", slavename="Fezile", builddir="Test_VMW_Hybrid", factory=Test_VMW_Hybrid),
	BuilderConfig(name="Build GCCWin_x86", slavename="Carrier-Win7", builddir="Build_GCCWin_x86", factory=Build_GCCWin_x86),
	BuilderConfig(name="Build MSVC_x86", slavename="Carrier-Win7", builddir="Build_MSVC_x86", factory=Build_MSVC_x86),
	BuilderConfig(name="Build MSVC2010_x86", slavename="Carrier-WHS-Bot", builddir="Build_MSVC2010_x86", factory=Build_MSVC2010_x86),
	BuilderConfig(name="Build MSVC_x64", slavename="Carrier-Win7", builddir="Build_MSVC_x64", factory=Build_MSVC_x64),
	BuilderConfig(name="Test WHS", slavename="Carrier-WHS-Bot", builddir="Test_WHS", factory=Test_WHS),
	BuilderConfig(name="Test VBox", slavename="Testee", builddir="Test_VBox", factory=Test_VBox),
]
c['schedulers'] = [
	SingleBranchScheduler(name="trunk", change_filter=ChangeFilter(), treeStableTimer=None, builderNames=["Build GCCLin_x86", "Build MSVC_x86", "Build MSVC2010_x86", "Test KVM AHK"]),
	SingleBranchScheduler(name="rostests", change_filter=ChangeFilter(category='rostests'), treeStableTimer=None, builderNames=["Test WHS"]),
	Triggerable(name="HotelLux Testbot Trigger", builderNames=["Test KVM", "Test VMW", "Test VMW Hybrid", "Test VBox"]),
	Periodic(name="Daily", builderNames=["Build GCCLin_x86 Release", "Build GCCWin_x86"], periodicBuildTimer=24*60*60),
	ForceScheduler(name="Force a Build", builderNames=["Build GCCLin_x86", "Build GCCWin_x86", "Build MSVC_x86", "Build MSVC2010_x86", "Build MSVC_x64", "Test KVM AHK", "Test WHS"])
]
c['slaves'] = [
	BuildSlave('AHK-Bot', credentials.get("slaves", "AHK-Bot_passwd")),
	BuildSlave('Fezile', credentials.get("slaves", "Fezile_passwd")),
	BuildSlave('HotelLux', credentials.get("slaves", "HotelLux_passwd")),
	BuildSlave('Carrier-WHS-Bot', credentials.get("slaves", "Carrier-WHS-Bot_passwd")),
	BuildSlave('Carrier-Win7', credentials.get("slaves", "Carrier-Win7_passwd")),
	BuildSlave('Testee', credentials.get("slaves", "Testee_passwd")),
]

c['status'] = [
	html.WebStatus(
		http_port=8010,
		authz=(Authz(
			auth=(LDAPAuth()),
			forceBuild='auth',
			forceAllBuilds='auth',
			pingBuilder='auth',
			stopBuild='auth',
			stopAllBuilds='auth',
			cancelPendingBuild='auth',
			stopChange='auth'
		)),
		maxRotatedFiles=10
	),
	words.IRC(
		host="irc.freenode.net",
		port=6667,
		nick=credentials.get("irc", "user"),
		password=credentials.get("irc", "passwd"),
		allowForce=False,
		channels=["#reactos", "#ReactOS-Dev", "#reactos-pl", "#reactos-builds"],
		notify_events={
			'exception': 1,
			'failure': 1
		}
	),
	mail.MailNotifier(
		fromaddr="buildbot@reactos.org",
		sendToInterestedUsers=False,
		extraRecipients=["ros-builds@reactos.org"],
		mode='failing',
		subject="%(builder)s: build failed",
		builders=["Build GCCLin_x86", "Build GCCLin_x86 Release", "Test KVM", "Test VMW", "Test VMW Hybrid", "Build GCCWin_x86", "Build MSVC_x86", "Build MSVC2010_x86", "Test WHS", "Test VBox"],
		smtpPassword=credentials.get("mail", "passwd"),
		smtpUser=credentials.get("mail", "user"),
		useTls=True,
		relayhost="iserv.reactos.org",
		smtpPort=587
	),
]
